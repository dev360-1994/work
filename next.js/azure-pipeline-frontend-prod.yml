# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none

variables:

  # Environment name
  environmentName: 'SL-IT-WHAPPEASTUS-02'
  nodeVersion: '18.x'
  APP_SERVER_URL: 'https://sl-it-whappeastus-02-api.azurewebsites.net'
  APP_GOOGLE_CAPTCHA_KEY: '6LcoZ1ImAAAAAPou1lNl8fFnpQSb6tht0ICTnes9'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        cd LaserTrader
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/LaserTrader'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: SL-IT-WHAPPEASTUS-02'
            env:
              APP_SERVER_URL: $(APP_SERVER_URL)
              APP_GOOGLE_CAPTCHA_KEY: $(APP_GOOGLE_CAPTCHA_KEY)       
            inputs:
              azureSubscription: 'Azure subscription 1(05770b69-06ac-451c-81b1-09eeefd5454a)'
              appType: 'webAppLinux'
              appName: 'SL-IT-WHAPPEASTUS-02'
              deployToSlotOrASE: true
              resourceGroupName: 'SL-IT-WHRGEASTUS-001'
              slotName: 'production'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|$(nodeVersion)'
              startUpCommand: '/home/site/wwwroot/node_modules/next/dist/bin/next start'